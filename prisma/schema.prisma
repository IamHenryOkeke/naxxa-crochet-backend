// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(cuid())
  email      String    @unique
  username   String?   @unique
  password   String?
  googleId   String?   @unique
  name       String?
  avatar     String?
  isVerified Boolean   @default(false)
  role       Role      @default(USER)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  token      Token[]
  Review     Review[]
}

enum Role {
  USER
  ADMIN
}

model Token {
  id        String   @id @default(cuid())
  tokenHash String // hashed version of the token
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([tokenHash])
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String
  image       String
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Product     Product[]

  @@index([isActive])
}

model Product {
  id          String         @id @default(cuid())
  name        String
  description String
  price       Float
  isActive    Boolean        @default(true)
  isFeatured  Boolean        @default(false)
  images      ProductImage[]
  categoryId  String
  category    Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  sizes       ProductSize[]
  Review      Review[]
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
}

model ProductImage {
  id        String  @id @default(cuid())
  imageUrl  String
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductSize {
  id        String  @id @default(cuid())
  productId String
  size      Size
  stock     Int     @default(0)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, size])
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String
  userId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([productId])
  @@index([userId])
}
